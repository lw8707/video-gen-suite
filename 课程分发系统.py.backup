#!/usr/bin/env python3
# -*- coding: utf-8 -*-

"""
【课程分发系统】
设计多平台课程分发和版权保护机制
"""

import os
import json

class 分发系统:
    def __init__(self):
        self.平台配置 = self.获取平台配置()
        self.分发策略 = self.制定分发策略()
    
    def 获取平台配置(self):
        """配置不同的分发平台"""
        return {
            "GitHub": {
                "类型": "代码托管",
                "可见性": "私有仓库",
                "优势": ["版本控制", "协作方便", "免费托管"],
                "限制": ["需要技术基础", "界面较复杂"]
            },
            "语雀": {
                "类型": "知识库", 
                "可见性": "团队空间",
                "优势": ["界面友好", "支持多种格式", "协作功能强"],
                "限制": ["需要注册", "免费版有限制"]
            },
            "Notion": {
                "类型": "全能工具",
                "可见性": "分享链接",
                "优势": ["灵活性高", "数据库功能", "模板丰富"],
                "限制": ["网络访问", "学习成本"]
            },
            "本地部署": {
                "类型": "自托管",
                "可见性": "完全控制", 
                "优势": ["数据安全", "定制性强", "无网络依赖"],
                "限制": ["需要服务器", "维护成本"]
            }
        }
    
    def 制定分发策略(self):
        """制定智能分发策略"""
        return {
            "核心内容": {
                "平台": "GitHub私有仓库",
                "保护": "知识产权声明+访问控制",
                "更新": "持续迭代，版本管理"
            },
            "教学材料": {
                "平台": "语雀知识库", 
                "保护": "水印+访问密码",
                "更新": "定期同步"
            },
            "实践项目": {
                "平台": "本地部署",
                "保护": "加密+授权验证", 
                "更新": "按需发布"
            },
            "社区交流": {
                "平台": "GitHub Discussions",
                "保护": "社区规范",
                "更新": "实时互动"
            }
        }
    
    def 生成分发指南(self):
        """生成分发平台使用指南"""
        指南 = """
# 📡 课程分发平台指南

## 分发策略总览

### 1. GitHub - 核心代码库
**用途**: 存储所有源代码、脚本、配置文件
**保护措施**:
- 私有仓库设置
- 知识产权声明文件
- 分支保护规则
- 访问权限控制

### 2. 语雀 - 教学文档平台  
**用途**: 课程文档、学习指南、参考资料
**保护措施**:
- 团队空间权限管理
- 文档水印添加
- 导出限制设置
- 访问日志监控

### 3. Notion - 课程管理系统
**用途**: 学习进度跟踪、作业提交、互动讨论
**保护措施**: 
- 分享链接密码保护
- 页面权限分级
- 数据备份机制

### 4. 本地部署 - 实践环境
**用途**: 开发环境、测试平台、项目演示
**保护措施**:
- 容器化部署
- 网络隔离
- 定期快照

## 同步机制

### 自动同步
- GitHub Actions 自动构建
- 脚本自动部署到各平台
- 定期备份验证

### 手动同步  
- 重要更新手动审核
- 版本发布流程控制
- 用户通知机制

## 版权保护

### 技术保护
- 代码混淆和加密
- 数字水印技术
- 访问行为监控

### 法律保护
- 知识产权声明
- 使用协议
- 侵权追责机制

## 用户支持

### 学习支持
- 在线文档
- 视频教程
- 社区问答

### 技术支持
- 环境搭建指导
- 问题排查帮助
- 更新维护服务
"""
        
        with open("课程分发指南.md", 'w', encoding='utf-8') as f:
            f.write(指南)
        
        print("✅ 课程分发指南已生成")
        return 指南
    
    def 创建同步脚本(self):
        """创建平台同步脚本"""
        同步脚本 = """#!/bin/bash
# 课程多平台同步脚本

echo "🔄 开始课程多平台同步..."

# 1. 备份当前状态
echo "📦 备份当前课程状态..."
tar -czf "课程同步备份_$(date +%Y%m%d_%H%M%S).tar.gz" 课程体系/ 知识产权声明.md

# 2. 生成分发包
echo "🎁 生成分发包..."
分发包="课程分发包_$(date +%Y%m%d).zip"
zip -r "$分发包" 课程体系/ 知识产权声明.md 课程分发指南.md

# 3. 更新GitHub
echo "🐙 更新GitHub仓库..."
git add .
git commit -m "课程体系更新: $(date '+%Y-%m-%d %H:%M')"
git push origin main

# 4. 生成部署报告
echo "📊 生成部署报告..."
cat > 同步报告.md << EOF
# 课程同步报告

## 同步时间
$(date)

## 同步内容
- 课程体系文件
- 知识产权声明  
- 分发指南文档

## 同步平台
- GitHub私有仓库
- 本地备份系统

## 文件统计
$(find 课程体系/ -name "*.md" | wc -l) 个课程文件
$(du -sh 课程体系/) 课程总大小

## 下一步行动
1. 验证各平台同步结果
2. 检查访问权限设置
3. 更新用户通知

